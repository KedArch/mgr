---
- name: "Check if k3s is installed"
  ansible.builtin.stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: "Set common parameters"
  ansible.builtin.set_fact:
    k3s_root_path: "{{ k3s_root_path if k3s_root_path is defined and k3s_root_path else null }}"
    k3s_conf_path: "{{ k3s_root_path ~ '/rancher/conf' if k3s_root_path is defined and k3s_root_path else '/etc/rancher' }}"
    k3s_data_path: "{{ k3s_root_path ~ '/rancher/data' if k3s_root_path is defined and k3s_root_path else '/var/lib/rancher' }}"

- name: "Uninstall k3s"
  ansible.builtin.include_tasks: uninstall.yml
  when: k3s_uninstall is defined and k3s_uninstall and k3s_binary.stat.exists

- name: "Prepare data and conf paths"
  ansible.builtin.include_tasks: paths.yml
  when: k3s_uninstall is not defined or not k3s_uninstall and not k3s_binary.stat.exists

- name: "Configure registry"
  ansible.builtin.template:
    dest: "{{ k3s_conf_path }}/k3s/registries.yaml"
    src: registries.yaml.j2
    mode: "640"
  when: k3s_uninstall is not defined or not k3s_uninstall and not k3s_binary.stat.exists
  register: registry

- name: "Find control plane endpoint"
  ansible.builtin.set_fact:
    k3s_cp_endpoint: "{{ hostvars[k3s_first_cp_node]['ansible_host'] }}"
  when: k3s_cp_endpoint is not defined and not (k3s_uninstall is defined and k3s_uninstall and k3s_binary.stat.exists)

- name: "Install k3s control plane node"
  ansible.builtin.include_tasks: install_first_control_plane.yml
  when: (k3s_uninstall is not defined or not k3s_uninstall) and (inventory_hostname == (k3s_first_cp_node)) and not k3s_binary.stat.exists

- name: "Install k3s node"
  ansible.builtin.include_tasks: install.yml
  when: >
    (k3s_uninstall is not defined or not k3s_uninstall)
    and not (inventory_hostname == (k3s_first_cp_node))
    and not k3s_binary.stat.exists
    and (inventory_hostname in groups[k3s_cp_node_group]
    or inventory_hostname in groups[k3s_worker_node_group])

- name: "Apply vars to nodes"
  ansible.builtin.include_tasks: vars.yml
  when: ((k3s_uninstall is not defined or not k3s_uninstall) and not k3s_binary.stat.exists)

- name: "Ensure k3s service is active"
  ansible.builtin.systemd_service:
    name: k3s
    state: "{{ 'restarted' if registry.changed else 'started' }}"
    enabled: false
  when: >
    (k3s_uninstall is not defined or not k3s_uninstall and k3s_binary.stat.exists)
    and (inventory_hostname in groups[k3s_cp_node_group])

- name: "Ensure k3s-agent service is active"
  ansible.builtin.systemd_service:
    name: k3s-agent
    state: "{{ 'restarted' if registry.changed else 'started' }}"
    enabled: false
  when: >
    (k3s_uninstall is not defined or not k3s_uninstall and k3s_binary.stat.exists)
    and (inventory_hostname in groups[k3s_worker_node_group])

- name: "Ensure CNI dir exists"
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'
  when: >
    (k3s_uninstall is not defined or not k3s_uninstall and k3s_binary.stat.exists)

- name: "Include task: cilium"
  ansible.builtin.include_tasks: cilium.yml
  when: >
    (k3s_uninstall is not defined or not k3s_uninstall and k3s_binary.stat.exists)
